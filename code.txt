<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Walking Tracker</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <style>
        /* Custom styles for light tones */
        body {
            background-color: #f9f9fb;
            color: #333333;
        }
    </style>
</head>

<body class="font-sans">

    <div class="flex h-screen bg-gradient-to-t from-pink-100 to-purple-200 relative">

        <!-- Left Side (Walking Tracker) -->
        <div
            class="w-1/2 flex flex-col items-center justify-center p-8 space-y-6 bg-white bg-opacity-70 backdrop-blur-xl shadow-md">
            <h1 class="text-3xl font-semibold text-pink-600">Walking Tracker</h1>

            <!-- Timer Display -->
            <div id="timer" class="text-5xl font-bold text-pink-600 py-4 border-b-4 border-pink-200 w-32 text-center">
                00:00</div>

            <!-- Start/Stop Buttons -->
            <div class="flex space-x-8">
                <button id="startBtn"
                    class="px-6 py-3 bg-pink-500 text-white rounded-full shadow-lg hover:bg-pink-600 focus:outline-none transition duration-200">Start</button>
                <button id="stopBtn"
                    class="px-6 py-3 bg-purple-500 text-white rounded-full shadow-lg hover:bg-purple-600 focus:outline-none transition duration-200"
                    disabled>Stop</button>
            </div>

            <!-- Terrain Type Selector -->
            <div class="w-48 mt-6">
                <label class="text-pink-600 text-lg">Terrain</label>
                <select id="terrain"
                    class="p-3 w-full rounded-xl border-2 border-pink-300 bg-white text-pink-600 focus:ring-2 focus:ring-pink-500 transition duration-200">
                    <option value="regular">Regular</option>
                    <option value="incline">Incline</option>
                    <option value="irregular">Irregular</option>
                </select>
            </div>

            <!-- Average Stats Display -->
            <div class="text-pink-600 text-lg space-y-2 mt-6">
                <p>Avg Walk Duration: <span id="avgDuration">00:00</span></p>
                <p>Avg Calories Burned: <span id="avgCalories">0</span></p>
            </div>
        </div>

        <!-- Right Side (Walking History) -->
        <div class="w-1/2 p-8 flex flex-col items-center space-y-6 relative"> <!-- Add relative here -->
            <!-- History Button (Circular, top-right corner) -->
            <button id="showHistoryBtn"
                class="absolute top-4 right-8 p-4 bg-purple-500 text-white rounded-full shadow-lg hover:bg-purple-600 focus:outline-none transition duration-200">
                <i class="fas fa-clock"></i>
            </button>

            <!-- Hidden History Section -->
            <div id="historySection" class="hidden w-full space-y-4 mt-6">
                <div id="history" class="space-y-4 overflow-y-auto max-h-80">
                    <!-- History entries will appear here -->
                </div>
            </div>
        </div>

    </div>

    <script>
        let timer = 0; // Timer in milliseconds
        let interval;
        let isRunning = false;
        let totalTime = 0;
        let totalCalories = 0;
        let walkData = []; // Array to store walking sessions data

        let lastSelectedTerrain = 'regular'; // Store selected terrain before walk starts

        // Elements
        const timerDisplay = document.getElementById('timer');
        const startBtn = document.getElementById('startBtn');
        const stopBtn = document.getElementById('stopBtn');
        const terrainSelect = document.getElementById('terrain');
        const avgDuration = document.getElementById('avgDuration');
        const avgCalories = document.getElementById('avgCalories');
        const historyContainer = document.getElementById('history');
        const showHistoryBtn = document.getElementById('showHistoryBtn');
        const historySection = document.getElementById('historySection');

        // Start Button Click Handler
        startBtn.addEventListener('click', () => {
            if (!isRunning) {
                interval = setInterval(updateTimer, 1000); // Update every 1 second (1000ms)
                startBtn.disabled = true;
                stopBtn.disabled = false;
                terrainSelect.disabled = true; // Disable terrain selection while walking
                lastSelectedTerrain = terrainSelect.value; // Keep track of the selected terrain before walk starts
                isRunning = true;
            }
        });

        // Stop Button Click Handler
        stopBtn.addEventListener('click', () => {
            if (isRunning) {
                clearInterval(interval);
                saveWalkData();
                startBtn.disabled = false;
                stopBtn.disabled = true;
                terrainSelect.disabled = false; // Enable terrain selection after walk ends
                terrainSelect.value = lastSelectedTerrain; // Keep the last selected terrain value
                isRunning = false;
                resetTimer(); // Reset the timer to 0 after stopping
            }
        });

        // Timer Update Function
        function updateTimer() {
            timer++; // Increment in seconds
            let minutes = Math.floor(timer / 60); // Divide by 60 to get minutes
            let seconds = timer % 60; // Get seconds

            timerDisplay.textContent = `${formatTime(minutes)}:${formatTime(seconds)}`;
        }

        // Format time as mm:ss
        function formatTime(time) {
            return time.toString().padStart(2, '0');
        }

        // Save walk data after each session
        function saveWalkData() {
            const terrain = terrainSelect.value;
            let caloriesBurned = calculateCalories(terrain);
            walkData.push({ time: timer, calories: caloriesBurned, terrain: terrain, date: new Date() });
            totalTime += timer;
            totalCalories += caloriesBurned;
            updateStats();
            addToHistory({ time: timer, calories: caloriesBurned, terrain: terrain, date: new Date() });
        }

        // Calculate calories burned based on terrain type and duration
        function calculateCalories(terrain) {
            let caloriesPerMinute = 5; // Base calories per minute for regular walk
            if (terrain === 'incline') {
                caloriesPerMinute = 8; // Higher for incline
            } else if (terrain === 'irregular') {
                caloriesPerMinute = 6; // Slightly higher for irregular
            }
            return Math.round(caloriesPerMinute * (timer / 60)); // Calories based on duration (in minutes)
        }

        // Update Stats Display
        function updateStats() {
            if (walkData.length > 0) {
                let avgWalkTime = totalTime / walkData.length;
                let avgCaloriesBurned = totalCalories / walkData.length;
                avgDuration.textContent = formatTime(Math.floor(avgWalkTime / 60)) + ':' + formatTime(avgWalkTime % 60);
                avgCalories.textContent = avgCaloriesBurned.toFixed(2);
            }
        }

        // Add a new entry to the walking history
        function addToHistory(sessionData) {
            const historyEntry = document.createElement('div');
            historyEntry.classList.add('bg-pink-100', 'p-4', 'rounded-lg', 'text-sm', 'flex', 'justify-between', 'items-center', 'space-x-6', 'transition', 'hover:bg-pink-200');

            const date = sessionData.date.toLocaleString();
            const duration = formatTime(Math.floor(sessionData.time / 60)) + ':' + formatTime(sessionData.time % 60);
            const calories = sessionData.calories;
            const terrain = sessionData.terrain;

            // Icons and concise layout for history entry
            let terrainIcon = '';
            let terrainColor = '';
            if (terrain === 'regular') {
                terrainIcon = 'fa-walking';
                terrainColor = 'text-pink-500'; // Pink for regular walk
            } else if (terrain === 'incline') {
                terrainIcon = 'fa-mountain';
                terrainColor = 'text-purple-500'; // Purple for incline
            } else {
                terrainIcon = 'fa-tree';
                terrainColor = 'text-green-500'; // Green for irregular
            }

            historyEntry.innerHTML = `  
        <div class="flex space-x-4 items-center">
          <span class="text-pink-600"><i class="fas fa-fire"></i> ${calories} cal</span>
          <span class="text-pink-600"><i class="fas fa-clock"></i> ${duration}</span>
          <span class="${terrainColor}"><i class="fas ${terrainIcon}"></i> ${terrain}</span>
        </div>
        <span class="text-pink-400 text-xs">${date}</span>
        <button class="text-red-500 text-xs ml-4 hover:text-red-600 transition duration-200" onclick="deleteHistoryEntry(this)">Delete</button>
      `;
            historyContainer.appendChild(historyEntry);
        }

        // Delete History Entry
        function deleteHistoryEntry(button) {
            const historyEntry = button.closest('div');
            const index = Array.from(historyContainer.children).indexOf(historyEntry); // Get the index of the entry

            // Remove the item from the walkData array
            const deletedWalk = walkData.splice(index, 1)[0]; // Remove the entry and get it

            // Update total time and total calories after deletion by recalculating from the remaining data
            totalTime = walkData.reduce((sum, entry) => sum + entry.time, 0);
            totalCalories = walkData.reduce((sum, entry) => sum + entry.calories, 0);

            updateStats(); // Update the stats after deletion
            historyEntry.remove(); // Remove the entry from the UI
        }

        // Toggle the history section visibility and change button icon
        showHistoryBtn.addEventListener('click', () => {
            historySection.classList.toggle('hidden');
            if (historySection.classList.contains('hidden')) {
                showHistoryBtn.innerHTML = '<i class="fas fa-clock"></i>'; // Show clock icon
            } else {
                showHistoryBtn.innerHTML = '<i class="fas fa-times"></i>'; // Show close (X) icon
            }
        });

        // Reset timer after stopping
        function resetTimer() {
            timer = 0;
            timerDisplay.textContent = "00:00";
        }
    </script>
</body>

</html>
